import java.text.SimpleDateFormat

allprojects {
    group = 'cn.dhbin'
    version = '1.0.2-SNAPSHOT'
}

ext {
    configuration = [
            javaVersion = JavaVersion.VERSION_1_8
    ]

    libraries = [
            springBootVersion = '2.3.1.RELEASE',
            springVersion = '5.2.8.RELEASE',
            lombokVersion = '1.18.12',
            hutoolVersion = '5.2.4',
            modelMapperVersion = '2.3.6',
            knife4jVersion = '2.0.4',
            validationApiVersion = '2.0.1.Final',
            mybatisPlusVersion = '3.3.1',
            velocityVersion = '2.2',
            mysqlConnectorVersion = '8.0.20',
            jacksonVersion = '2.11.0',
            autoServiceVersion = '1.0-rc7',
            swaggerAnnotationsVersion = '1.5.22',
            junitVersion = '5.7.0-M1',
            compileTestVersion = '0.18',
    ]

    lib = [
            "spring-boot-configuration-processor": "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}",
            "spring-boot-starter"                : "org.springframework.boot:spring-boot-starter:${springBootVersion}",
            "spring-boot-starter-web"            : "org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
            "spring-boot-starter-undertow"       : "org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}",
            "validation-api"                     : "javax.validation:validation-api:${validationApiVersion}",
            "lombok"                             : "org.projectlombok:lombok:${lombokVersion}",
            "hutool"                             : "cn.hutool:hutool-all:${hutoolVersion}",
            "modelMapper"                        : "org.modelmapper:modelmapper:${modelMapperVersion}",
            "knife4j"                            : "com.github.xiaoymin:knife4j-micro-spring-boot-starter:${knife4jVersion}",
            "mybatis-plus-generator"             : "com.baomidou:mybatis-plus-generator:${mybatisPlusVersion}",
            "mybatis-plus-boot-starter"          : "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}",
            "mybatis-plus-annotation"            : "com.baomidou:mybatis-plus-annotation:${mybatisPlusVersion}",
            "velocity"                           : "org.apache.velocity:velocity-engine-core:${velocityVersion}",
            "mysql-connector"                    : "mysql:mysql-connector-java:${mysqlConnectorVersion}",
            "jackson-annotations"                : "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
            "auto-service"                       : "com.google.auto.service:auto-service:${autoServiceVersion}",
            "swagger-annotations"                : "io.swagger:swagger-annotations:${swaggerAnnotationsVersion}",

            "compile-testing"                    : "com.google.testing.compile:compile-testing:${compileTestVersion}",
            "junit-jupiter-api"                  : "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
            "junit-jupiter-engine"               : "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    ]
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly "${lib['lombok']}"
        annotationProcessor "${lib['spring-boot-configuration-processor']}"
        annotationProcessor "${lib['lombok']}"

    }

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    jar {
        afterEvaluate {
            manifest {
                attributes 'Implementation-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': System.getProperty("user.name")
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
            }
        }
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                encoding "UTF-8"
                charSet 'UTF-8'
                author true
                version true
                failOnError false
                links "http://docs.oracle.com/javase/8/docs/api"
                options.tags = ["date"]
            }
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    tasks.whenTaskAdded { task ->
        if (task.name.contains('signMavenJavaPublication')) {
            task.enabled = new File(project.property('signing.secretKeyRingFile') as String).isFile()
        }
    }

    publishing {
        repositories {
            maven {
                def userName = System.getenv("un")
                def passWord = System.getenv("ps")
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username userName
                    password passWord
                }
            }
        }
        publications {

            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'minion-core'
                    description = 'web开发工具包'
                    url = 'https://github.com/DHBin/minion-core'

                    scm {
                        connection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        developerConnection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        url = 'https://github.com/DHBin/minion-core'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'DHB'
                            name = 'dhbin'
                            email = 'xx158@qq.com'
                        }
                    }

                    withXml {
                        def root = asNode()
                        root.dependencies.'*'.findAll {
                            def d = it
                            d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }.each() {
                                d.scope*.value = 'compile'
                                d.appendNode('optional', true)
                            }
                        }
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

}
